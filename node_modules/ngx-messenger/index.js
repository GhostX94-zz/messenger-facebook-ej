import { Component, Directive, ElementRef, EventEmitter, HostListener, Input, NgModule, Output, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';
import * as moment from 'moment';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MessengerChatBoxComponent = (function () {
    function MessengerChatBoxComponent() {
        this.currentUserId = 1;
        this.isFullScreen = true;
        this.onSend = new EventEmitter();
        this.onGoBack = new EventEmitter();
    }
    /**
     * @param {?} text
     * @return {?}
     */
    MessengerChatBoxComponent.prototype.emitMessage = /**
     * @param {?} text
     * @return {?}
     */
    function (text) {
        this.onSend.next(text);
        this.messageInput.nativeElement.value = '';
        this.scrollHeight = this.container.nativeElement.scrollHeight;
    };
    /**
     * @return {?}
     */
    MessengerChatBoxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.scrollHeight = this.container.nativeElement.scrollHeight;
    };
    /**
     * @return {?}
     */
    MessengerChatBoxComponent.prototype.goBack = /**
     * @return {?}
     */
    function () {
        this.onGoBack.next();
    };
    MessengerChatBoxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'msg-chat-box',
                    styles: [".chat { list-style: none; margin: 0; padding: 0; } .chat li { margin-bottom: 10px; padding-bottom: 5px; border-bottom: 1px dotted #B3A9A9; } .chat li.left .chat-body { margin-left: 60px; } .chat li.right .chat-body { margin-right: 60px; } .chat li .chat-body p { margin: 0; color: #777777; } .card .slidedown .glyphicon, .chat .glyphicon { margin-right: 5px; } .card-body { overflow-y: scroll; height: 250px; } .card-heading { padding: 25px; background: #f7f7f7; border-bottom: 1px solid #dfdfdf; text-align: center; } ::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3); background-color: #F5F5F5; } ::-webkit-scrollbar { width: 12px; background-color: #F5F5F5; } ::-webkit-scrollbar-thumb { -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3); background-color: #555; } .btn--back { float: left; background: none; border: 1px solid #dcdcdc; color: #828282; }"],
                    template: "\n  <div class=\"card\">\n  <div class=\"card-heading\" #topBar id=\"accordion\">\n     <button (click)=\"goBack()\" class=\"btn btn-default btn--back\">\n     <span class=\"fa fa-chevron-left left\"></span></button>\n      <span class=\"fa fa-commenting-o\"></span> Chat\n  </div>\n  <div class=\"card-body\"\n   #container\n   [scrollTop]=\"scrollHeight\"\n   dynamicHeight\n   [isFullScreen]=\"isFullScreen\"\n   [topBar]=\"topBar\"\n   [bottomBar]=\"bottomBar\" >\n      <ul class=\"chat\" *ngFor=\"let message of conversation\">\n         <msg-message\n         [position]=\"currentUserId !== message?.user?.id ? 'left' : 'right'\"\n         [message]=\"message\"\n         ></msg-message>\n      </ul>\n  </div>\n  <div class=\"card-footer\" #bottomBar>\n      <div class=\"input-group\">\n          <input #messageInput id=\"btn-input\" type=\"text\" class=\"form-control input-sm\" placeholder=\"Type your message here...\" />\n          <span class=\"input-group-btn\">\n              <button (click)=\"emitMessage(messageInput.value)\" class=\"btn btn-sm\" id=\"btn-chat\">\n                  Send</button>\n          </span>\n      </div>\n  </div>\n  "
                },] },
    ];
    /** @nocollapse */
    MessengerChatBoxComponent.ctorParameters = function () { return []; };
    MessengerChatBoxComponent.propDecorators = {
        "container": [{ type: ViewChild, args: ['container',] },],
        "messageInput": [{ type: ViewChild, args: ['messageInput',] },],
        "currentUserId": [{ type: Input },],
        "conversation": [{ type: Input },],
        "isFullScreen": [{ type: Input },],
        "onSend": [{ type: Output },],
        "onGoBack": [{ type: Output },],
    };
    return MessengerChatBoxComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MessengerMessageComponent = (function () {
    function MessengerMessageComponent() {
        this.position = 'right';
        this.moment = moment;
    }
    /**
     * @return {?}
     */
    MessengerMessageComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    MessengerMessageComponent.decorators = [
        { type: Component, args: [{
                    selector: 'msg-message',
                    styles: [".img-circle { width: 65px; border-radius: 50%; margin: 5px; } .chat-body { padding: 5px; border-radius: 4px; border: 1px solid #d3d3d3; margin-bottom: 5px; } small { padding-right: 10px; padding-left: 10px; padding-bottom: 10px; } .right { text-align: right; } span.fa.fa-clock-o { margin: 5px; }"],
                    template: "\n    <li [class.left]=\"position === 'left'\" [class.right]=\"position === 'right'\" class=\"clearfix\">\n        <span\n        [class.float-left]=\"position === 'left'\"\n        [class.float-right]=\"position === 'right'\"\n        class=\"chat-img\">\n            <img [src]=\"message?.user?.imageUrl\" alt=\"User Avatar\" class=\"img-circle\" />\n        </span>\n        <div class=\"chat-body clearfix\">\n            <div class=\"header\">\n                <strong\n                class=\"primary-font\">{{message?.user?.name}}</strong>\n                <small\n                [class.float-left]=\"position === 'right'\"\n                [class.float-right]=\"position === 'left'\"\n                class=\"text-muted\">\n                    <span class=\"fa fa-clock-o\"></span>{{moment(message.date).fromNow()}}</small>\n            </div>\n            <p [class.right]=\"position === 'right'\">\n            {{message?.text}}\n            </p>\n        </div>\n    </li>"
                },] },
    ];
    /** @nocollapse */
    MessengerMessageComponent.ctorParameters = function () { return []; };
    MessengerMessageComponent.propDecorators = {
        "message": [{ type: Input },],
        "position": [{ type: Input },],
    };
    return MessengerMessageComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DynamicHeightDirective = (function () {
    function DynamicHeightDirective(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    DynamicHeightDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ topBarBorders = this.getBordersWidthByElement(this.topBar);
        var /** @type {?} */ topBarHeight = this.topBar.offsetHeight + topBarBorders.borderBottom + topBarBorders.borderTop;
        var /** @type {?} */ bottomBarBorders = this.getBordersWidthByElement(this.bottomBar);
        var /** @type {?} */ bottomBarHeight = this.bottomBar.offsetHeight + bottomBarBorders.borderBottom + bottomBarBorders.borderTop;
        this._componentSectionsHeight = (topBarHeight + bottomBarHeight);
        if (this.isFullScreen) {
            this.setFullScreenHeight();
        }
        else {
            this._parentContainerHeight = this.el.nativeElement.parentNode.parentNode.parentNode.height;
            this.setParentHeight();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DynamicHeightDirective.prototype.onWindowResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isFullScreen) {
            this.setFullScreenHeight();
        }
        else {
            this.setParentHeight();
        }
    };
    /**
     * @return {?}
     */
    DynamicHeightDirective.prototype.setFullScreenHeight = /**
     * @return {?}
     */
    function () {
        this.el.nativeElement.style.height = (window.innerHeight - this._componentSectionsHeight).toString() + 'px';
    };
    /**
     * @return {?}
     */
    DynamicHeightDirective.prototype.setParentHeight = /**
     * @return {?}
     */
    function () {
        this.el.nativeElement.style.height = (this._parentContainerHeight - this._componentSectionsHeight).toString() + 'px';
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DynamicHeightDirective.prototype.getBordersWidthByElement = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        return {
            borderTop: parseFloat(getComputedStyle(el).borderTop.split(' ').join('')),
            borderBottom: parseFloat(getComputedStyle(el).borderBottom.split(' ').join(''))
        };
    };
    DynamicHeightDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[dynamicHeight]'
                },] },
    ];
    /** @nocollapse */
    DynamicHeightDirective.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    DynamicHeightDirective.propDecorators = {
        "isFullScreen": [{ type: Input },],
        "topBar": [{ type: Input },],
        "bottomBar": [{ type: Input },],
        "onWindowResize": [{ type: HostListener, args: ['window:resize', ['$event'],] },],
    };
    return DynamicHeightDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MessengerModule = (function () {
    function MessengerModule() {
    }
    /**
     * @return {?}
     */
    MessengerModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: MessengerModule
        };
    };
    MessengerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        MessengerChatBoxComponent,
                        MessengerMessageComponent,
                        DynamicHeightDirective
                    ],
                    exports: [
                        MessengerChatBoxComponent,
                        MessengerMessageComponent,
                        DynamicHeightDirective
                    ]
                },] },
    ];
    /** @nocollapse */
    MessengerModule.ctorParameters = function () { return []; };
    return MessengerModule;
}());

export { MessengerModule, MessengerChatBoxComponent, MessengerMessageComponent, DynamicHeightDirective };
